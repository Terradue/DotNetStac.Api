//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Stac;
using Stac.Common;
using Stac.Api.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Stac.Api.WebApi.Controllers.Extensions.Transaction
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ITransactionController
    {

        /// <summary>
        /// add a new STAC Item or Items in an ItemCollection to a collection
        /// </summary>


        /// <param name="collectionId">local identifier of a collection</param>

        /// <returns>Status of the create request.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> PostFeatureAsync(PostStacItemOrCollection body, string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update an existing feature by Id with a complete item definition
        /// </summary>

        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>

        /// <param name="body">The request body must contain a representation of the replacement item.</param>

        /// <param name="collectionId">local identifier of a collection</param>

        /// <param name="featureId">local identifier of a feature</param>

        /// <returns>The item was replaced</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> UpdateFeatureAsync(string if_Match, StacItem body, string collectionId, string featureId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update an existing feature by Id with a partial item definition
        /// </summary>

        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>


        /// <param name="collectionId">local identifier of a collection</param>

        /// <param name="featureId">local identifier of a feature</param>

        /// <returns>The item was replaced</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> PatchFeatureAsync(string if_Match, Patch body, string collectionId, string featureId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete an existing feature by Id
        /// </summary>

        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>

        /// <param name="collectionId">local identifier of a collection</param>

        /// <param name="featureId">local identifier of a feature</param>

        /// <returns>The resource was deleted.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteFeatureAsync(string if_Match, string collectionId, string featureId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class TransactionController : Stac.Api.WebApi.StacApiController
    {
        private ITransactionController _implementation;

        public TransactionController(ITransactionController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// add a new STAC Item or Items in an ItemCollection to a collection
        /// </summary>
        /// <param name="collectionId">local identifier of a collection</param>
        /// <returns>Status of the create request.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("collections/{collectionId}/items")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> PostFeature([Microsoft.AspNetCore.Mvc.FromBody] PostStacItemOrCollection body, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string collectionId, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PostFeatureAsync(body, collectionId, cancellationToken);
        }

        /// <summary>
        /// update an existing feature by Id with a complete item definition
        /// </summary>
        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>
        /// <param name="body">The request body must contain a representation of the replacement item.</param>
        /// <param name="collectionId">local identifier of a collection</param>
        /// <param name="featureId">local identifier of a feature</param>
        /// <returns>The item was replaced</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collections/{collectionId}/items/{featureId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> UpdateFeature([Microsoft.AspNetCore.Mvc.FromHeader(Name = "If-Match")] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string if_Match, [Microsoft.AspNetCore.Mvc.FromBody] StacItem body, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string collectionId, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string featureId, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.UpdateFeatureAsync(if_Match, body, collectionId, featureId, cancellationToken);
        }

        /// <summary>
        /// update an existing feature by Id with a partial item definition
        /// </summary>
        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>
        /// <param name="collectionId">local identifier of a collection</param>
        /// <param name="featureId">local identifier of a feature</param>
        /// <returns>The item was replaced</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("collections/{collectionId}/items/{featureId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<StacItem>> PatchFeature([Microsoft.AspNetCore.Mvc.FromHeader(Name = "If-Match")] string if_Match, [Microsoft.AspNetCore.Mvc.FromBody] Patch body, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string collectionId, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string featureId, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PatchFeatureAsync(if_Match, body, collectionId, featureId, cancellationToken);
        }

        /// <summary>
        /// delete an existing feature by Id
        /// </summary>
        /// <param name="if_Match">Only take the action if the ETag of the item still matches</param>
        /// <param name="collectionId">local identifier of a collection</param>
        /// <param name="featureId">local identifier of a feature</param>
        /// <returns>The resource was deleted.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("collections/{collectionId}/items/{featureId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteFeature([Microsoft.AspNetCore.Mvc.FromHeader(Name = "If-Match")] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string if_Match, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string collectionId, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string featureId, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.DeleteFeatureAsync(if_Match, collectionId, featureId, cancellationToken);
        }

    }

    


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603